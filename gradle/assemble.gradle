import org.apache.tools.ant.filters.ReplaceTokens

dependencyCache = {
    def cacheLocation = new File(gradle.gradleUserHomeDir, "cache")
    copy {
        from(cacheLocation) {
            def dependencyIncludes = [] as Set
            def includeClosure = { artifact ->
                def dependency = artifact.getResolvedDependency()
                def file = artifact.file
                    dependencyIncludes << "${dependency.moduleGroup}/${dependency.moduleName}/*-${dependency.moduleVersion}.*"
                    dependencyIncludes << "${dependency.moduleGroup}/${dependency.moduleName}/jars/${dependency.moduleName}-${dependency.moduleVersion}.jar"
                    dependencyIncludes << "${dependency.moduleGroup}/${dependency.moduleName}/bundles/${dependency.moduleName}-${dependency.moduleVersion}.jar"
                }
            for (project in subprojects) {
                project.configurations.compile.resolvedConfiguration.resolvedArtifacts.each(includeClosure)
                project.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each(includeClosure)
                project.configurations.findByName("jsp21")?.resolvedConfiguration?.resolvedArtifacts?.each(includeClosure)
                project.configurations.findByName("agent")?.resolvedConfiguration?.resolvedArtifacts?.each(includeClosure)
            }
            includes = dependencyIncludes as List
            exclude "org.grails/**"
        }
        into "$installDir/lib"
    }
    copy {
        from (cacheLocation) {
            includes = ['org.grails/grails-datastore-gorm/jars/grails-datastore-gorm-*.jar', 
                        'org.grails/grails-gdoc-engine/jars/grails-gdoc-engine-*.jar']
        }
        into "$installDir/lib"
    }
}

task populateDependencies {
    doFirst dependencyCache
}

task libs(dependsOn: getTasksByName("assemble", true))  {
    doFirst dependencyCache

    destinationDir = 'dist'
    doLast {
        copy {
            for (project in subprojects) {
                from(project.libsDir) {
                    include "*-${grailsVersion}.jar"
                }
            }
            into 'dist'
        }
        copy {
            from("$projectDir/grails-resources/src/grails/grails-home") {
                include 'src/grails', 'src/war'
            }
            into installDir
        }
    }
}

libs.inputs.files(subprojects.configurations.compile, subprojects.configurations.runtime)
libs.outputs.files(fileTree("lib"))

task pluginsFromSvn {
    dir = "$buildDir/pluginsFromSvn"
    grailsHibernateDest = "$dir/grails-hibernate-${grailsVersion}.zip"
    grailsTomcatDest = "$dir/grails-tomcat-${grailsVersion}.zip"
    outputs.files grailsHibernateDest, grailsTomcatDest
    doFirst {
        ant {
            mkdir(dir: dir)
            def versionTag = grailsVersion.replaceAll(/\./, '_').toUpperCase()
            get(src: "http://svn.codehaus.org/grails-plugins/grails-hibernate/tags/RELEASE_${versionTag}/grails-hibernate-${grailsVersion}.zip",
                dest: grailsHibernateDest, verbose: true, usetimestamp: true)
            get(src: "http://svn.codehaus.org/grails-plugins/grails-tomcat/tags/RELEASE_${versionTag}/grails-tomcat-${grailsVersion}.zip",
                dest: grailsTomcatDest, verbose: true, usetimestamp: true)
        }
    }
}

binExecutables = ["cygrails", "grails", "grails-debug", "grails-debug.bat", "grails.bat"]

distSpec = copySpec {
    from(installDir) {
        into "grails-$grailsVersion"
        exclude "bin/*"
    }
    
    from (installDir) {
        into "grails-$grailsVersion"
        include "bin/*"
        fileMode = 0755
    }
    
    from(projectDir) {
        into "grails-$grailsVersion"
        include 'gradle/', 'build.gradle', "gradlew.bat","gradle.properties"
    }

    from(projectDir) {
        into "grails-$grailsVersion"
        include "gradlew"
        fileMode = 0755
    }

    from(docs.destinationDir) {
        into "grails-$grailsVersion/doc"
    }

    from(project.files(pluginsFromSvn.dir) { builtBy 'pluginsFromSvn' }) {
        into "grails-$grailsVersion/plugins"
    }
}

task zipDist(type: Zip,dependsOn: [getTasksByName('install', true), 'populateDependencies', 'installResources']) {
    from distSpec
    destinationDir = "${buildDir}/distributions" as File
    baseName = 'grails'
    appendix = grailsVersion
}

/*task zipDoc(type: Zip) {
    appendix = 'docs'
    from docs.destinationDir
}*/
